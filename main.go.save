package main

import (
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi-docker/sdk/v4/go/docker"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		// Create a Docker network for the k3d cluster
		network, err := docker.NewNetwork(ctx, "k3d-network", &docker.NetworkArgs{
			Name: pulumi.String("k3d-net"),
		})
		if err != nil {
			return err
		}

		// Run k3d cluster create command using Docker
		clusterCreateCommand := pulumi.Sprintf(
			`k3d cluster create mycluster --servers 1 --agents 1 \
                        --k3s-arg '--disable=traefik@server:*' \
                        --k3s-arg '--disable=servicelb@server:*' \
                        --k3s-arg '--disable=metrics-server@server:*' \
                        --k3s-arg '--disable-cloud-controller@server:0' \
                        --api-port 6443 \
                        --k3d-arg '--volume=/mnt/data:/mnt/data@all' \
                        --network %s \
                        --k3s-arg '--node-ip=192.168.1.183' \
                        --k3s-arg '--kube-apiserver-arg=service-node-port-range=8000-32767@server:0'`,
			network.Name,
		)

		_, err = docker.NewContainer(ctx, "k3d-cluster", &docker.ContainerArgs{
			Image: pulumi.String("rancher/k3s:v1.22.2-k3s1"),
			Command: pulumi.StringArray{
				pulumi.String("sh"),
				pulumi.String("-c"),
				clusterCreateCommand,
			},
			// Mount Docker socket to allow container to interact with Docker
			Volumes: docker.ContainerVolumeArray{
				&docker.ContainerVolumeArgs{
					HostPath:      pulumi.String("/var/run/docker.sock"),
					ContainerPath: pulumi.String("/var/run/docker.sock"),
				},
			},
		})
		if err != nil {
			return err
		}

		// Output the network information
		ctx.Export("k3dNetworkID", network.ID())
		ctx.Export("k3dNetworkName", network.Name)

		return nil
	})
}
